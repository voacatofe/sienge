# Script PowerShell para iniciar ambiente de PRODU√á√ÉO do projeto Sienge
# Otimizado para produ√ß√£o com recursos completos e seguran√ßa refor√ßada

param(
    [Parameter(Position=0)]
    [string]$Command = "help",
    [Parameter(Position=1)]
    [string]$Option = ""
)

# Configura√ß√µes
$ScriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
$ProjectRoot = Split-Path -Parent $ScriptDir
$EnvFile = ".env"
$ComposeFile = "docker-compose.yml"

# Fun√ß√£o para imprimir mensagens coloridas
function Write-Header {
    Write-Host "üè≠ Sienge - Ambiente de PRODU√á√ÉO" -ForegroundColor Cyan
    Write-Host "=================================" -ForegroundColor Cyan
    Write-Host ""
}

function Write-Status {
    param([string]$Message)
    Write-Host "[INFO] $Message" -ForegroundColor Blue
}

function Write-Success {
    param([string]$Message)
    Write-Host "[SUCCESS] $Message" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "[WARNING] $Message" -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "[ERROR] $Message" -ForegroundColor Red
}

# Fun√ß√£o para configurar ambiente de produ√ß√£o
function Setup-ProductionEnvironment {
    Write-Status "Configurando ambiente de produ√ß√£o..."
    
    # Configura√ß√µes padr√£o para produ√ß√£o
    $env:NODE_ENV = "production"
    $env:BUILD_TARGET = "production"
    $env:POSTGRES_DB = if ($env:POSTGRES_DB) { $env:POSTGRES_DB } else { "sienge_data" }
    $env:POSTGRES_USER = if ($env:POSTGRES_USER) { $env:POSTGRES_USER } else { "sienge_app" }
    $env:POSTGRES_PASSWORD = if ($env:POSTGRES_PASSWORD) { $env:POSTGRES_PASSWORD } else { "senha_forte" }
    $env:DB_PORT_EXTERNAL = if ($env:DB_PORT_EXTERNAL) { $env:DB_PORT_EXTERNAL } else { "5432" }
    $env:APP_PORT_EXTERNAL = if ($env:APP_PORT_EXTERNAL) { $env:APP_PORT_EXTERNAL } else { "3000" }
    $env:ADMINER_PORT_EXTERNAL = if ($env:ADMINER_PORT_EXTERNAL) { $env:ADMINER_PORT_EXTERNAL } else { "8080" }
    
    # Recursos otimizados para produ√ß√£o
    $env:DB_MEMORY_LIMIT = if ($env:DB_MEMORY_LIMIT) { $env:DB_MEMORY_LIMIT } else { "2G" }
    $env:DB_CPU_LIMIT = if ($env:DB_CPU_LIMIT) { $env:DB_CPU_LIMIT } else { "2.0" }
    $env:APP_MEMORY_LIMIT = if ($env:APP_MEMORY_LIMIT) { $env:APP_MEMORY_LIMIT } else { "4G" }
    $env:APP_CPU_LIMIT = if ($env:APP_CPU_LIMIT) { $env:APP_CPU_LIMIT } else { "4.0" }
    $env:ADMINER_MEMORY_LIMIT = if ($env:ADMINER_MEMORY_LIMIT) { $env:ADMINER_MEMORY_LIMIT } else { "512M" }
    $env:ADMINER_CPU_LIMIT = if ($env:ADMINER_CPU_LIMIT) { $env:ADMINER_CPU_LIMIT } else { "1.0" }
    
    # Configura√ß√µes de sincroniza√ß√£o para produ√ß√£o
    $env:SYNC_SCHEDULE = if ($env:SYNC_SCHEDULE) { $env:SYNC_SCHEDULE } else { "0 2 * * *" }
    $env:SYNC_BATCH_SIZE = if ($env:SYNC_BATCH_SIZE) { $env:SYNC_BATCH_SIZE } else { "200" }
    $env:SYNC_MAX_RETRIES = if ($env:SYNC_MAX_RETRIES) { $env:SYNC_MAX_RETRIES } else { "3" }
}

# Fun√ß√£o para carregar vari√°veis de ambiente
function Load-Environment {
    Setup-ProductionEnvironment
    
    if (Test-Path $EnvFile) {
        Write-Status "Carregando vari√°veis de ambiente de $EnvFile..."
        Get-Content $EnvFile | ForEach-Object {
            if ($_ -match "^[^#]*=") {
                $key, $value = $_ -split "=", 2
                [Environment]::SetEnvironmentVariable($key, $value, "Process")
            }
        }
    } else {
        Write-Error "Arquivo $EnvFile n√£o encontrado!"
        Write-Status "Crie o arquivo .env baseado no .env.example"
        exit 1
    }
}

# Fun√ß√£o para verificar Docker
function Test-Docker {
    try {
        docker info | Out-Null
        Write-Success "Docker est√° rodando"
    } catch {
        Write-Error "Docker n√£o est√° rodando. Por favor, inicie o Docker Desktop."
        exit 1
    }
}

# Fun√ß√£o para verificar seguran√ßa
function Test-Security {
    Write-Status "Verificando configura√ß√µes de seguran√ßa..."
    
    # Verificar se senhas n√£o s√£o padr√£o
    if ($env:POSTGRES_PASSWORD -eq "senha_forte" -or $env:POSTGRES_PASSWORD -eq "dev_password") {
        Write-Warning "ATEN√á√ÉO: Senha padr√£o detectada! Configure uma senha forte no .env"
    }
    
    # Verificar se credenciais da API Sienge est√£o configuradas
    if (-not $env:SIENGE_SUBDOMAIN -or -not $env:SIENGE_USERNAME -or -not $env:SIENGE_PASSWORD) {
        Write-Warning "ATEN√á√ÉO: Credenciais da API Sienge n√£o configuradas!"
        Write-Status "Configure SIENGE_SUBDOMAIN, SIENGE_USERNAME e SIENGE_PASSWORD no .env"
    }
    
    Write-Success "Verifica√ß√£o de seguran√ßa conclu√≠da"
}

# Fun√ß√£o para iniciar ambiente de produ√ß√£o
function Start-Production {
    param([string]$Clean)
    
    Write-Header
    Write-Status "Iniciando ambiente de PRODU√á√ÉO..."
    
    Test-Docker
    Load-Environment
    Test-Security
    
    # Parar containers existentes
    Write-Status "Parando containers existentes..."
    docker-compose -f $ComposeFile down 2>$null
    
    # Limpar volumes se solicitado
    if ($Clean -eq "true") {
        Write-Warning "ATEN√á√ÉO: Removendo TODOS os dados do banco de produ√ß√£o!"
        $confirm = Read-Host "Tem certeza que deseja continuar? (y/N)"
        if ($confirm -ne "y" -and $confirm -ne "Y") {
            Write-Status "Opera√ß√£o cancelada."
            return
        }
        Write-Status "Removendo volumes..."
        docker-compose -f $ComposeFile down -v 2>$null
    }
    
    # Construir e iniciar containers
    Write-Status "Construindo e iniciando containers de produ√ß√£o..."
    docker-compose -f $ComposeFile up --build -d
    
    # Aguardar containers ficarem prontos
    Write-Status "Aguardando containers ficarem prontos..."
    Start-Sleep -Seconds 20
    
    # Verificar status
    Write-Status "Verificando status dos containers..."
    docker-compose -f $ComposeFile ps
    
    # Testar conectividade
    Test-Connectivity
    
    # Mostrar informa√ß√µes de acesso
    Show-AccessInfo
}

# Fun√ß√£o para parar ambiente de produ√ß√£o
function Stop-Production {
    param([string]$Clean)
    
    Write-Status "Parando ambiente de PRODU√á√ÉO..."
    Load-Environment
    
    if ($Clean -eq "true") {
        Write-Warning "ATEN√á√ÉO: Isso ir√° remover TODOS os dados do banco de produ√ß√£o!"
        $confirm = Read-Host "Tem certeza que deseja continuar? (y/N)"
        if ($confirm -ne "y" -and $confirm -ne "Y") {
            Write-Status "Opera√ß√£o cancelada."
            return
        }
        Write-Status "Removendo volumes..."
        docker-compose -f $ComposeFile down -v
    } else {
        docker-compose -f $ComposeFile down
    }
    
    Write-Success "Ambiente de produ√ß√£o parado com sucesso!"
}

# Fun√ß√£o para visualizar logs
function Show-Logs {
    Write-Status "Visualizando logs do ambiente de produ√ß√£o..."
    Load-Environment
    
    $containers = docker-compose -f $ComposeFile ps
    if (-not ($containers -match "Up")) {
        Write-Error "Nenhum container est√° rodando."
        Write-Status "Execute: $($MyInvocation.MyCommand.Name) start"
        exit 1
    }
    
    Write-Status "Pressione Ctrl+C para sair dos logs"
    Write-Host ""
    docker-compose -f $ComposeFile logs -f
}

# Fun√ß√£o para backup do banco
function Backup-Database {
    Write-Status "Criando backup do banco de dados de produ√ß√£o..."
    Load-Environment
    
    # Configurar vari√°veis do banco
    $dbName = "sienge_data"
    $dbUser = "sienge_app"
    $backupDir = "backups/prod"
    
    # Criar diret√≥rio de backup
    if (-not (Test-Path $backupDir)) {
        New-Item -ItemType Directory -Path $backupDir -Force | Out-Null
    }
    
    # Gerar nome do arquivo com timestamp
    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    $backupFile = "$backupDir/backup_${dbName}_${timestamp}.sql"
    
    # Verificar se os containers est√£o rodando
    $containers = docker-compose -f $ComposeFile ps
    if (-not ($containers -match "Up")) {
        Write-Error "Containers n√£o est√£o rodando. Execute primeiro: $($MyInvocation.MyCommand.Name) start"
        exit 1
    }
    
    # Criar backup
    docker-compose -f $ComposeFile exec -T db pg_dump -U $dbUser $dbName | Out-File -FilePath $backupFile -Encoding UTF8
    
    if ($LASTEXITCODE -eq 0) {
        $fileSize = (Get-Item $backupFile).Length
        $fileSizeMB = [math]::Round($fileSize / 1MB, 2)
        Write-Success "Backup criado com sucesso: $backupFile"
        Write-Status "Tamanho: ${fileSizeMB} MB"
    } else {
        Write-Error "Falha ao criar backup"
        exit 1
    }
}

# Fun√ß√£o para testar conectividade
function Test-Connectivity {
    Write-Status "Testando conectividade..."
    
    # Testar banco de dados
    $dbTest = docker-compose -f $ComposeFile exec -T db pg_isready -U $env:POSTGRES_USER -d $env:POSTGRES_DB 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Banco de dados est√° acess√≠vel"
    } else {
        Write-Error "Banco de dados n√£o est√° acess√≠vel"
    }
    
    # Testar aplica√ß√£o
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:$($env:APP_PORT_EXTERNAL)/api/health" -UseBasicParsing -TimeoutSec 5
        Write-Success "Aplica√ß√£o est√° acess√≠vel"
    } catch {
        Write-Warning "Aplica√ß√£o ainda n√£o est√° acess√≠vel (pode estar inicializando)"
    }
}

# Fun√ß√£o para mostrar informa√ß√µes de acesso
function Show-AccessInfo {
    Write-Host ""
    Write-Success "üéâ Ambiente de PRODU√á√ÉO iniciado com sucesso!"
    Write-Host ""
    Write-Host "üìã Informa√ß√µes de acesso:"
    Write-Host "  üåê Aplica√ß√£o: http://${env:NEXT_PUBLIC_PRIMARY_DOMAIN}:$($env:APP_PORT_EXTERNAL)"
    Write-Host "  üóÑÔ∏è  Banco de dados: ${env:NEXT_PUBLIC_PRIMARY_DOMAIN}:$($env:DB_PORT_EXTERNAL)"
    Write-Host "  üìä Adminer: http://${env:NEXT_PUBLIC_PRIMARY_DOMAIN}:$($env:ADMINER_PORT_EXTERNAL)"
    Write-Host "  üìä URL Externa BD: postgresql://$($env:POSTGRES_USER):$($env:POSTGRES_PASSWORD)@${env:NEXT_PUBLIC_PRIMARY_DOMAIN}:$($env:DB_PORT_EXTERNAL)/$($env:POSTGRES_DB)"
    Write-Host ""
    Write-Host "üîß Comandos √∫teis:"
    Write-Host "  üìù Ver logs: $($MyInvocation.MyCommand.Name) logs"
    Write-Host "  üõë Parar: $($MyInvocation.MyCommand.Name) stop"
    Write-Host "  üîÑ Reiniciar: $($MyInvocation.MyCommand.Name) restart"
    Write-Host "  üßπ Limpar tudo: $($MyInvocation.MyCommand.Name) stop --clean"
    Write-Host "  üíæ Backup: $($MyInvocation.MyCommand.Name) backup"
    Write-Host ""
    Write-Host "‚ö†Ô∏è  IMPORTANTE: Este √© o ambiente de PRODU√á√ÉO!"
    Write-Host "   - Fa√ßa backups regulares"
    Write-Host "   - Monitore os logs"
    Write-Host "   - Configure credenciais seguras"
    Write-Host ""
}

# Fun√ß√£o para mostrar ajuda
function Show-Help {
    Write-Header
    
    Write-Host "üìã Comandos Dispon√≠veis:" -ForegroundColor Yellow
    Write-Host ""
    
    Write-Host "üè≠ Produ√ß√£o:" -ForegroundColor Yellow
    Write-Host "  start              - Iniciar ambiente de produ√ß√£o" -ForegroundColor Green
    Write-Host "  start --clean     - Iniciar ambiente limpo (remove volumes - CUIDADO!)" -ForegroundColor Green
    Write-Host "  stop               - Parar ambiente de produ√ß√£o" -ForegroundColor Green
    Write-Host "  stop --clean      - Parar e remover volumes (CUIDADO!)" -ForegroundColor Green
    Write-Host "  restart           - Reiniciar ambiente" -ForegroundColor Green
    Write-Host "  logs               - Visualizar logs" -ForegroundColor Green
    Write-Host ""
    
    Write-Host "üíæ Backup:" -ForegroundColor Yellow
    Write-Host "  backup            - Backup do banco de produ√ß√£o" -ForegroundColor Green
    Write-Host ""
    
    Write-Host "üí° Exemplos de uso:" -ForegroundColor Cyan
    Write-Host "  $($MyInvocation.MyCommand.Name) start                    # Iniciar produ√ß√£o" -ForegroundColor Green
    Write-Host "  $($MyInvocation.MyCommand.Name) backup                   # Backup produ√ß√£o" -ForegroundColor Green
    Write-Host "  $($MyInvocation.MyCommand.Name) stop --clean             # Parar e limpar (CUIDADO!)" -ForegroundColor Green
    Write-Host ""
    Write-Host "‚ö†Ô∏è  ATEN√á√ÉO: Este √© o ambiente de PRODU√á√ÉO!" -ForegroundColor Red
    Write-Host "   Use com cuidado e sempre fa√ßa backups!" -ForegroundColor Red
    Write-Host ""
}

# Fun√ß√£o principal
function Main {
    Set-Location $ProjectRoot
    
    switch ($Command) {
        "start" {
            Start-Production $Option
        }
        "stop" {
            Stop-Production $Option
        }
        "restart" {
            Stop-Production "false"
            Start-Sleep -Seconds 2
            Start-Production "false"
        }
        "logs" {
            Show-Logs
        }
        "backup" {
            Backup-Database
        }
        "help" {
            Show-Help
        }
        default {
            Write-Error "Comando n√£o reconhecido: $Command"
            Write-Host ""
            Show-Help
            exit 1
        }
    }
}

# Executar fun√ß√£o principal
Main
