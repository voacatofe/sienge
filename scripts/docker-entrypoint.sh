#!/bin/bash

# Script de entrypoint para inicializa√ß√£o autom√°tica do schema Prisma
# Este script √© executado quando o container da aplica√ß√£o √© iniciado

set -e  # Sair em caso de erro

echo "üöÄ Iniciando aplica√ß√£o Sienge Data Sync..."

# Fun√ß√£o para log com timestamp
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# Fun√ß√£o para aguardar o banco de dados estar dispon√≠vel
wait_for_db() {
    log "‚è≥ Aguardando banco de dados estar dispon√≠vel..."
    
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        # Usar curl para testar conectividade HTTP (mais simples que nc)
        if curl -f -s http://${POSTGRES_HOST:-db}:${POSTGRES_PORT:-5432} >/dev/null 2>&1 || \
           timeout 1 bash -c "</dev/tcp/${POSTGRES_HOST:-db}/${POSTGRES_PORT:-5432}" >/dev/null 2>&1; then
            log "‚úÖ Banco de dados est√° dispon√≠vel!"
            return 0
        fi
        
        log "üîÑ Tentativa $attempt/$max_attempts - Banco ainda n√£o dispon√≠vel, aguardando..."
        sleep 2
        attempt=$((attempt + 1))
    done
    
    log "‚ùå Erro: Banco de dados n√£o ficou dispon√≠vel ap√≥s $max_attempts tentativas"
    return 1
}

# Fun√ß√£o para executar migra√ß√µes do Prisma
run_migrations() {
    log "üîÑ Aplicando schema do Prisma ao banco de dados..."
    
    # Usar db push diretamente para garantir que o schema seja aplicado
    # db push √© mais confi√°vel em ambientes de produ√ß√£o quando n√£o h√° migra√ß√µes
    log "üîÑ Executando prisma db push..."
    if npx prisma db push --accept-data-loss; then
        log "‚úÖ Schema do banco de dados aplicado com sucesso!"
    else
        log "‚ö†Ô∏è Erro ao aplicar schema, tentando com force-reset..."
        # Em √∫ltimo caso, for√ßar reset (CUIDADO: isso apaga dados!)
        if npx prisma db push --force-reset; then
            log "‚ö†Ô∏è Schema aplicado com force-reset (dados foram resetados)!"
        else
            log "‚ùå Erro cr√≠tico ao aplicar schema do banco de dados"
            return 1
        fi
    fi
}

# Fun√ß√£o para gerar o cliente Prisma
generate_client() {
    log "üîÑ Gerando cliente Prisma..."
    npx prisma generate
    log "‚úÖ Cliente Prisma gerado com sucesso!"
}

# Fun√ß√£o para verificar a conex√£o com o banco
verify_connection() {
    log "üîç Verificando conex√£o com o banco de dados..."
    
    if curl -f -s http://${POSTGRES_HOST:-db}:${POSTGRES_PORT:-5432} >/dev/null 2>&1 || \
       timeout 1 bash -c "</dev/tcp/${POSTGRES_HOST:-db}/${POSTGRES_PORT:-5432}" >/dev/null 2>&1; then
        log "‚úÖ Conex√£o com banco de dados verificada!"
        return 0
    else
        log "‚ùå Erro: N√£o foi poss√≠vel conectar ao banco de dados"
        return 1
    fi
}

# Fun√ß√£o para mostrar informa√ß√µes do ambiente
show_environment() {
    log "üìã Informa√ß√µes do ambiente:"
    log "   NODE_ENV: ${NODE_ENV:-development}"
    log "   DATABASE_URL: ${DATABASE_URL:0:20}..." # Mostrar apenas in√≠cio da URL por seguran√ßa
    log "   PORT: ${PORT:-3000}"
}

# Fun√ß√£o principal
main() {
    log "üéØ Iniciando processo de inicializa√ß√£o..."
    
    # Mostrar informa√ß√µes do ambiente
    show_environment
    
    # Aguardar banco de dados estar dispon√≠vel
    if ! wait_for_db; then
        log "‚ùå Falha na inicializa√ß√£o: Banco de dados n√£o dispon√≠vel"
        exit 1
    fi
    
    # Verificar conex√£o
    if ! verify_connection; then
        log "‚ùå Falha na inicializa√ß√£o: N√£o foi poss√≠vel conectar ao banco"
        exit 1
    fi
    
    # Executar migra√ß√µes
    if ! run_migrations; then
        log "‚ùå Falha na inicializa√ß√£o: Erro ao executar migra√ß√µes"
        exit 1
    fi
    
    # Gerar cliente Prisma
    if ! generate_client; then
        log "‚ùå Falha na inicializa√ß√£o: Erro ao gerar cliente Prisma"
        exit 1
    fi
    
    log "‚úÖ Inicializa√ß√£o conclu√≠da com sucesso!"
    log "üöÄ Iniciando aplica√ß√£o Next.js..."
    
    # Detectar se existe build standalone
    if [ -f "server.js" ]; then
        log "üì¶ Build standalone detectado, iniciando servidor otimizado..."
        exec node server.js
    elif [ -d ".next" ] && [ -f ".next/BUILD_ID" ]; then
        log "üì¶ Build de produ√ß√£o detectado, iniciando em modo produ√ß√£o..."
        exec npm start
    else
        log "üî® Build de produ√ß√£o n√£o encontrado, fazendo build..."
        npm run build
        log "üì¶ Build conclu√≠do, iniciando em modo produ√ß√£o..."
        exec npm start
    fi
}

# Executar fun√ß√£o principal com todos os argumentos passados
main "$@"
