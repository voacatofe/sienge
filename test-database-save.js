#!/usr/bin/env node

// Script para testar se o salvamento no banco est√° funcionando
const axios = require('axios');

async function checkDatabase() {
  try {
    console.log('üîç Verificando dados no banco...');

    // Simular uma verifica√ß√£o via API (se houver endpoint)
    const response = await axios.get(
      'http://localhost:3000/api/data/customers',
      {
        params: { limit: 5 },
      }
    );

    console.log(
      'üìä Primeiros 5 clientes no banco:',
      JSON.stringify(response.data, null, 2)
    );
  } catch (error) {
    console.log(
      '‚ÑπÔ∏è Endpoint de consulta n√£o dispon√≠vel, verifique diretamente no banco'
    );
    console.log(
      'üí° Use o Adminer em http://localhost:8080 para verificar a tabela "clientes"'
    );
  }
}

async function testSyncAndCheck() {
  try {
    console.log('üß™ Iniciando teste completo...');
    console.log('');

    // 1. Executar sincroniza√ß√£o
    console.log('1Ô∏è‚É£ Executando sincroniza√ß√£o...');
    const syncResponse = await axios.post('http://localhost:3000/api/sync', {
      entities: ['customers'],
    });

    console.log('‚úÖ Sincroniza√ß√£o conclu√≠da:', {
      success: syncResponse.data.success,
      totalProcessed: syncResponse.data.summary?.totalProcessed || 0,
      message: syncResponse.data.message,
    });
    console.log('');

    // 2. Aguardar um pouco para garantir que os dados foram salvos
    console.log('2Ô∏è‚É£ Aguardando salvamento...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    console.log('');

    // 3. Verificar dados no banco
    console.log('3Ô∏è‚É£ Verificando dados salvos...');
    await checkDatabase();
  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
    if (error.response?.data) {
      console.error(
        'üìù Detalhes:',
        JSON.stringify(error.response.data, null, 2)
      );
    }
  }
}

// Executar teste
testSyncAndCheck();
