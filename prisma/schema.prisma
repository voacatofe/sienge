generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ApiCredentials {
  id              Int      @id @default(autoincrement())
  subdomain       String   @unique
  apiUser         String   @map("api_user")
  apiPasswordHash String   @map("api_password_hash") // SENSITIVE: Hash bcrypt/argon2 da senha da API
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  isActive        Boolean  @default(true) @map("is_active")

  @@index([subdomain])
  @@index([isActive])
  @@map("api_credentials")
}

model SyncLog {
  id               Int       @id @default(autoincrement())
  entityType       String
  syncStartedAt    DateTime  @default(now())
  syncCompletedAt  DateTime?
  recordsProcessed Int       @default(0)
  recordsInserted  Int       @default(0)
  recordsUpdated   Int       @default(0)
  recordsErrors    Int       @default(0)
  status           String
  errorMessage     String?
  apiCallsMade     Int       @default(0)

  @@index([entityType])
  @@index([status])
  @@index([syncStartedAt])
  @@index([entityType, status])
  @@map("sync_logs")
}

model Empresa {
  idEmpresa          Int                 @id  // ID da API Sienge (sem auto-incremento)
  nomeEmpresa        String
  cnpj               String?              // SENSITIVE: CNPJ da empresa - criptografado
  nomeFantasia       String?
  codigoEmpresa      String?
  ativo              Boolean             @default(true)
  clientes           Cliente[]
  empreendimentos    Empreendimento[]
  solicitacoesCompra SolicitacaoCompra[]
  titulosPagar       TituloPagar[]
  titulosReceber     TituloReceber[]

  @@index([nomeEmpresa])
  @@index([ativo])
  @@index([codigoEmpresa])
  @@index([nomeEmpresa, ativo])
  @@map("empresas")
}

model Departamento {
  idDepartamento     Int                       @id @default(autoincrement())
  nomeDepartamento   String
  codigoDepartamento String?
  pedidosCompra      PedidoCompra[]
  solicitacoesCompra SolicitacaoCompra[]
  alocacoesDespesa   TituloPagarDepartamento[]

  @@index([nomeDepartamento])
  @@index([codigoDepartamento])
  @@map("departamentos")
}

model CentroCusto {
  idCentroCusto     Int                      @id @default(autoincrement())
  nomeCentroCusto   String
  codigoCentroCusto String?
  ativo             Boolean                  @default(true)
  alocacoesDespesa  TituloPagarCentroCusto[]

  @@index([nomeCentroCusto])
  @@index([ativo])
  @@index([codigoCentroCusto])
  @@map("centros_custo")
}

model Indexador {
  idIndexador    Int             @id  // ID da API Sienge (sem auto-incremento)
  nomeIndexador  String
  descricao      String?
  periodicidade  String?
  valorAtual     Decimal?        @db.Decimal(18, 6)
  contratosVenda ContratoVenda[]
  titulosPagar   TituloPagar[]
  titulosReceber TituloReceber[]

  @@index([nomeIndexador])
  @@index([periodicidade])
  @@map("indexadores")
}

model TipoCliente {
  idTipoCliente Int       @id @default(autoincrement())
  descricao     String

  @@index([descricao])
  @@map("tipos_cliente")
}


model TipoImovel {
  idTipoImovel Int                  @id @default(autoincrement())
  descricao    String
  unidades     UnidadeImobiliaria[]

  @@index([descricao])
  @@map("tipos_imovel")
}

model TipoCondicaoPagamento {
  idTipoCondPag  Int             @id @default(autoincrement())
  descricao      String
  contratosVenda ContratoVenda[]
  reservas       ReservaUnidade[]

  @@index([descricao])
  @@map("tipos_condicao_pagamento")
}

model PlanoFinanceiro {
  idPlanoFinanceiro Int                      @id  // ID da API Sienge (sem auto-incremento)
  nomePlano         String
  codigoPlano       String?
  tipo              String?
  contratosVenda    ContratoVenda[]
  alocacoesCCusto   TituloPagarCentroCusto[]
  titulosPagar      TituloPagar[]
  titulosReceber    TituloReceber[]

  @@index([nomePlano])
  @@index([codigoPlano])
  @@index([tipo])
  @@map("planos_financeiros")
}

model DocumentoIdentificacao {
  idDocumentoIdent String          @id
  descricao        String?
  titulosPagar     TituloPagar[]
  titulosReceber   TituloReceber[]

  @@index([descricao])
  @@map("documentos_identificacao")
}

model Municipio {
  idMunicipio      Int               @id @default(autoincrement())
  nome             String
  uf               String
  codigoIBGE       String?
  enderecosCliente ClienteEndereco[]
  enderecosCredor  CredorEndereco[]

  @@index([nome])
  @@index([uf])
  @@index([codigoIBGE])
  @@index([nome, uf])
  @@map("municipios")
}

model Cliente {
  idCliente           Int               @id  // ID da API Sienge (sem auto-incremento)
  nomeCompleto        String
  nomeSocial          String?
  cpfCnpj            String            // SENSITIVE: CPF/CNPJ do cliente - criptografado
  rg                 String?
  dataNascimento     DateTime?
  nacionalidade      String?
  email              String?
  ativo              Boolean           @default(true)
  dataCadastro       DateTime          @default(now())
  dataAtualizacao    DateTime?         // Data da última modificação da API
  idEmpresa          Int?
  estadoCivilStr     String?           // String direta da API: "Casado", "Solteiro"
  profissaoStr       String?           // String direta da API: "Engenheiro", "Advogado"
  
  // Campos adicionais da API Sienge
  foreigner          String?           // "N" ou "S" - estrangeiro
  internationalId    String?           // ID internacional
  issuingBody        String?           // Órgão emissor do RG
  clientType         String?           // Tipo de cliente
  birthPlace         String?           // Naturalidade
  matrimonialRegime  String?           // Regime matrimonial
  fatherName         String?           // Nome do pai
  motherName         String?           // Nome da mãe
  sex                String?           // Sexo ("Feminino", "Masculino")
  licenseNumber      String?           // Número da carteira
  licenseIssuingBody String?           // Órgão emissor da carteira
  issueDateIdentityCard DateTime?     // Data emissão RG
  marriageDate       DateTime?         // Data do casamento
  licenseIssueDate   DateTime?         // Data emissão carteira
  mailingAddress     String?           // Endereço de correspondência
  
  // Relacionamentos
  empresa            Empresa?          @relation(fields: [idEmpresa], references: [idEmpresa])
  
  // Relacionamentos com outras tabelas
  anexos             ClienteAnexo[]
  enderecos          ClienteEndereco[]
  rendas             ClienteRenda[]
  telefones          ClienteTelefone[]
  contratosVenda     ContratoVenda[]
  reservas           ReservaUnidade[]
  titulosReceber     TituloReceber[]

  @@index([nomeCompleto])
  @@index([ativo])
  @@index([dataCadastro])
  @@index([dataAtualizacao])
  @@index([idEmpresa])
  @@index([nomeCompleto, ativo])
  @@index([idEmpresa, ativo])
  @@map("clientes")
}

model ClienteTelefone {
  idTelefone Int     @id @default(autoincrement())
  numero     String
  tipo       String?
  observacao String?
  main       Boolean? @default(false)  // Telefone principal
  idd        String?                   // Código internacional (+55)
  idCliente  Int
  cliente    Cliente @relation(fields: [idCliente], references: [idCliente])

  @@index([idCliente])
  @@index([main])
  @@map("cliente_telefones")
}

model ClienteEndereco {
  idEndereco   Int        @id @default(autoincrement())
  logradouro   String
  numero       String
  complemento  String?
  bairro       String?
  cep          String?
  tipoEndereco String?
  mail         Boolean?   @default(false)  // Endereço de correspondência
  idMunicipio  Int?
  idCliente    Int
  cliente      Cliente    @relation(fields: [idCliente], references: [idCliente])
  municipio    Municipio? @relation(fields: [idMunicipio], references: [idMunicipio])

  @@index([idCliente])
  @@index([mail])
  @@map("cliente_enderecos")
}

model ClienteRenda {
  idRenda        Int      @id @default(autoincrement())
  descricaoRenda String
  valorMensal    Decimal  @db.Decimal(18, 2)
  moeda          String?  @default("BRL")
  comprovada     Boolean?
  kinship        String?  // Grau de parentesco (ex: "Cônjuge", "Filho")
  idCliente      Int
  cliente        Cliente  @relation(fields: [idCliente], references: [idCliente])

  @@index([idCliente])
  @@index([kinship])
  @@map("cliente_rendas")
}

model ClienteAnexo {
  idAnexo       Int     @id @default(autoincrement())
  tipoDocumento String
  urlArquivo    String?
  idCliente     Int
  cliente       Cliente @relation(fields: [idCliente], references: [idCliente])

  @@map("cliente_anexos")
}


model Empreendimento {
  idEmpreendimento    Int                  @id  // ID da API Sienge (sem auto-incremento)
  nome                String
  codigo              String?
  descricao           String?
  idEmpresa           Int?
  cidade              String?
  contratosSuprimento ContratoSuprimento[]
  empresa             Empresa?             @relation(fields: [idEmpresa], references: [idEmpresa])
  pedidosCompra       PedidoCompra[]
  unidades            UnidadeImobiliaria[]

  @@map("empreendimentos")
}

model UnidadeImobiliaria {
  idUnidade        Int              @id @default(autoincrement())
  codigoUnidade    String
  idEmpreendimento Int
  idTipoImovel     Int
  bloco            String?
  andar            Int?
  areaPrivativa    Decimal?         @db.Decimal(10, 2)
  areaTotal        Decimal?         @db.Decimal(10, 2)
  valorTabela      Decimal          @db.Decimal(18, 2)
  valorMinimo      Decimal?         @db.Decimal(18, 2)
  statusUnidade    String
  contratoVenda    ContratoVenda?
  reservas         ReservaUnidade[]
  empreendimento   Empreendimento   @relation(fields: [idEmpreendimento], references: [idEmpreendimento])
  tipoImovel       TipoImovel       @relation(fields: [idTipoImovel], references: [idTipoImovel])

  @@index([codigoUnidade])
  @@index([statusUnidade])
  @@index([valorTabela])
  @@index([idEmpreendimento])
  @@index([idTipoImovel])
  @@index([bloco])
  @@index([andar])
  @@index([statusUnidade, valorTabela])
  @@index([idEmpreendimento, statusUnidade])
  @@index([codigoUnidade, statusUnidade])
  @@map("unidades_imobiliarias")
}

model ReservaUnidade {
  idReserva           Int                     @id @default(autoincrement())
  idUnidade           Int
  idCliente           Int
  dataReserva         DateTime                @default(now())
  validadeReserva     DateTime?
  statusReserva       String?
  observacoes         String?
  idContratoVenda     Int?                    @unique
  idCondicaoPagamento Int?
  cliente             Cliente                 @relation(fields: [idCliente], references: [idCliente])
  condicaoPagamento   TipoCondicaoPagamento?  @relation(fields: [idCondicaoPagamento], references: [idTipoCondPag])
  contratoVenda       ContratoVenda?          @relation(fields: [idContratoVenda], references: [idContrato])
  unidade             UnidadeImobiliaria      @relation(fields: [idUnidade], references: [idUnidade])

  @@index([statusReserva])
  @@index([dataReserva])
  @@index([validadeReserva])
  @@index([idCliente])
  @@index([idUnidade])
  @@index([idCondicaoPagamento])
  @@index([statusReserva, dataReserva])
  @@index([idCliente, statusReserva])
  @@map("reservas_unidades")
}

model ContratoVenda {
  idContrato           Int                     @id  // ID da API Sienge (sem auto-incremento)
  numeroContrato       String
  idCliente            Int
  idUnidade            Int                     @unique
  dataContrato         DateTime
  valorContrato        Decimal                 @db.Decimal(18, 2)
  idIndexador          Int?
  idPlanoFinanceiro    Int?
  idCondicaoPagamento  Int?
  entrada              Decimal?                @db.Decimal(18, 2)
  financiamento        Decimal?                @db.Decimal(18, 2)
  observacoes          String?
  statusContrato       String
  comissoes            ComissaoVenda[]
  cliente              Cliente                 @relation(fields: [idCliente], references: [idCliente])
  condicaoPagamento    TipoCondicaoPagamento?  @relation(fields: [idCondicaoPagamento], references: [idTipoCondPag])
  indexador            Indexador?              @relation(fields: [idIndexador], references: [idIndexador])
  planoFinanceiro      PlanoFinanceiro?        @relation(fields: [idPlanoFinanceiro], references: [idPlanoFinanceiro])
  unidade              UnidadeImobiliaria      @relation(fields: [idUnidade], references: [idUnidade])
  reserva              ReservaUnidade?
  titulosReceber       TituloReceber[]

  @@index([numeroContrato])
  @@index([statusContrato])
  @@index([dataContrato])
  @@index([idCliente])
  @@index([idUnidade])
  @@index([idCondicaoPagamento])
  @@index([statusContrato, dataContrato])
  @@index([idCliente, statusContrato])
  @@map("contratos_venda")
}

model ComissaoVenda {
  idComissao    Int           @id  // ID da API Sienge (sem auto-incremento)
  idContrato    Int
  nomeCorretor  String
  percentual    Decimal?      @db.Decimal(5, 2)
  valorComissao Decimal       @db.Decimal(18, 2)
  paga          Boolean       @default(false)
  dataPagamento DateTime?
  contrato      ContratoVenda @relation(fields: [idContrato], references: [idContrato])

  @@index([idContrato])
  @@index([nomeCorretor])
  @@index([paga])
  @@index([dataPagamento])
  @@index([valorComissao])
  @@index([paga, dataPagamento])
  @@index([idContrato, paga])
  @@index([nomeCorretor, paga])
  @@map("comissoes_venda")
}

model PortadorRecebimento {
  idPortador      Int             @id  // ID da API Sienge (sem auto-incremento)
  descricao       String
  codigo          String?
  ativo           Boolean         @default(true)
  titulosReceber  TituloReceber[]

  @@index([descricao])
  @@index([ativo])
  @@index([codigo])
  @@map("portadores_recebimento")
}

model TituloReceber {
  idTituloReceber   Int                     @id  // ID da API Sienge (sem auto-incremento)
  idContrato        Int?
  idCliente         Int
  idEmpresa         Int?
  numeroDocumento   String
  idDocumentoIdent  String?
  dataEmissao       DateTime
  dataVencimento    DateTime
  valorOriginal     Decimal                 @db.Decimal(18, 2)
  valorAtualizado   Decimal?                @db.Decimal(18, 2)
  idIndexador       Int?
  juros             Decimal?                @db.Decimal(18, 2)
  multa             Decimal?                @db.Decimal(18, 2)
  descontoConcedido Decimal?                @db.Decimal(18, 2)
  valorPago         Decimal?                @db.Decimal(18, 2)
  dataPagamento     DateTime?
  status            String
  observacoes       String?
  idPortador        Int?
  idPlanoFinanceiro Int?
  cliente           Cliente                 @relation(fields: [idCliente], references: [idCliente])
  contrato          ContratoVenda?          @relation(fields: [idContrato], references: [idContrato])
  documentoIdent    DocumentoIdentificacao? @relation(fields: [idDocumentoIdent], references: [idDocumentoIdent])
  empresa           Empresa?                @relation(fields: [idEmpresa], references: [idEmpresa])
  indexador         Indexador?              @relation(fields: [idIndexador], references: [idIndexador])
  planoFinanceiro   PlanoFinanceiro?        @relation(fields: [idPlanoFinanceiro], references: [idPlanoFinanceiro])
  portador          PortadorRecebimento?    @relation(fields: [idPortador], references: [idPortador])

  @@index([numeroDocumento])
  @@index([status])
  @@index([dataVencimento])
  @@index([valorOriginal])
  @@index([idCliente])
  @@index([idContrato])
  @@index([idPortador])
  @@index([status, dataVencimento])
  @@index([idCliente, status])
  @@map("titulos_receber")
}

model Credor {
  idCredor            Int                  @id @default(autoincrement())
  tipoCredor          String?
  nomeCredor          String
  cpfCnpj             String               // SENSITIVE: CPF/CNPJ do credor - criptografado
  inscricaoEstadual   String?
  contato             String?
  telefoneContato     String?
  emailContato        String?
  ativo               Boolean              @default(true)
  ehCorretor          Boolean              @default(false)
  contratosSuprimento ContratoSuprimento[]
  cotacoes            CotacaoPreco[]
  enderecos           CredorEndereco[]
  contasBancarias     CredorInfoBancaria[]
  notasFiscais        NotaFiscalCompra[]
  pedidos             PedidoCompra[]
  titulosPagar        TituloPagar[]

  @@index([nomeCredor])
  @@index([ativo])
  @@index([tipoCredor])
  @@index([ehCorretor])
  @@index([nomeCredor, ativo])
  @@map("credores")
}

model CredorEndereco {
  idEndereco  Int        @id @default(autoincrement())
  logradouro  String
  numero      String
  complemento String?
  bairro      String?
  cep         String?
  idMunicipio Int?
  idCredor    Int
  credor      Credor     @relation(fields: [idCredor], references: [idCredor])
  municipio   Municipio? @relation(fields: [idMunicipio], references: [idMunicipio])

  @@map("credor_enderecos")
}

model CredorInfoBancaria {
  idInfoBancaria      Int     @id @default(autoincrement())
  idCredor            Int
  banco               String
  agencia             String
  conta               String
  digitoConta         String?
  tipoConta           String
  nomeBeneficiario    String?
  cpfCnpjBeneficiario String? // SENSITIVE: CPF/CNPJ do beneficiário - criptografado
  ativa               Boolean @default(true)
  credor              Credor  @relation(fields: [idCredor], references: [idCredor])

  @@index([idCredor])
  @@index([ativa])
  @@index([banco])
  @@map("credor_info_bancaria")
}

model SolicitacaoCompra {
  idSolicitacao     Int               @id @default(autoincrement())
  numeroSolicitacao String
  idEmpresa         Int?
  idDepartamento    Int?
  solicitante       String
  dataSolicitacao   DateTime          @default(now())
  descricao         String?
  status            String
  cotacoes          CotacaoPreco[]
  pedido            PedidoCompra?
  itens             SolicitacaoItem[]
  departamento      Departamento?     @relation(fields: [idDepartamento], references: [idDepartamento])
  empresa           Empresa?          @relation(fields: [idEmpresa], references: [idEmpresa])

  @@map("solicitacoes_compra")
}

model SolicitacaoItem {
  idSolicitacaoItem Int               @id @default(autoincrement())
  idSolicitacao     Int
  descricaoItem     String
  quantidade        Decimal           @db.Decimal(18, 4)
  unidade           String
  justificativa     String?
  solicitacao       SolicitacaoCompra @relation(fields: [idSolicitacao], references: [idSolicitacao])

  @@map("solicitacao_itens")
}

model PedidoCompra {
  idPedido            Int                @id @default(autoincrement())
  numeroPedido        String
  idSolicitacao       Int?               @unique
  idCredor            Int
  dataPedido          DateTime
  dataEntregaPrevista DateTime?
  idEmpreendimento    Int?
  idDepartamento      Int?
  valorTotal          Decimal            @db.Decimal(18, 2)
  status              String
  notasFiscais        NotaFiscalCompra[]
  itens               PedidoItem[]
  credor              Credor             @relation(fields: [idCredor], references: [idCredor])
  departamento        Departamento?      @relation(fields: [idDepartamento], references: [idDepartamento])
  empreendimento      Empreendimento?    @relation(fields: [idEmpreendimento], references: [idEmpreendimento])
  solicitacao         SolicitacaoCompra? @relation(fields: [idSolicitacao], references: [idSolicitacao])

  @@map("pedidos_compra")
}

model PedidoItem {
  idPedidoItem   Int          @id @default(autoincrement())
  idPedido       Int
  descricaoItem  String
  quantidade     Decimal      @db.Decimal(18, 4)
  unidade        String
  precoUnitario  Decimal      @db.Decimal(18, 4)
  valorTotalItem Decimal      @db.Decimal(18, 2)
  pedido         PedidoCompra @relation(fields: [idPedido], references: [idPedido])

  @@map("pedido_itens")
}

model ContratoSuprimento {
  idContratoSuprimento Int                @id @default(autoincrement())
  numeroContrato       String
  idCredor             Int
  idEmpreendimento     Int?
  dataInicio           DateTime
  dataFim              DateTime?
  objeto               String?
  valorContrato        Decimal            @db.Decimal(18, 2)
  status               String
  credor               Credor             @relation(fields: [idCredor], references: [idCredor])
  empreendimento       Empreendimento?    @relation(fields: [idEmpreendimento], references: [idEmpreendimento])
  medicoes             MedicaoContrato[]
  notasFiscais         NotaFiscalCompra[]
  titulosPagar         TituloPagar[]

  @@map("contratos_suprimento")
}

model MedicaoContrato {
  idMedicao            Int                @id @default(autoincrement())
  idContratoSuprimento Int
  numeroMedicao        Int
  dataMedicao          DateTime
  percentualExecutado  Decimal?           @db.Decimal(5, 2)
  valorMedicao         Decimal            @db.Decimal(18, 2)
  aprovada             Boolean            @default(false)
  contrato             ContratoSuprimento @relation(fields: [idContratoSuprimento], references: [idContratoSuprimento])

  @@map("medicoes_contrato")
}

model CotacaoPreco {
  idCotacao        Int               @id @default(autoincrement())
  idSolicitacao    Int
  idCredor         Int
  dataCotacao      DateTime
  validaAte        DateTime?
  valorTotalCotado Decimal           @db.Decimal(18, 2)
  condicoes        String?
  escolhida        Boolean           @default(false)
  itens            CotacaoItem[]
  credor           Credor            @relation(fields: [idCredor], references: [idCredor])
  solicitacao      SolicitacaoCompra @relation(fields: [idSolicitacao], references: [idSolicitacao])

  @@map("cotacoes_preco")
}

model CotacaoItem {
  idCotacaoItem  Int          @id @default(autoincrement())
  idCotacao      Int
  descricaoItem  String
  quantidade     Decimal      @db.Decimal(18, 4)
  unidade        String
  precoUnitario  Decimal      @db.Decimal(18, 4)
  valorTotalItem Decimal      @db.Decimal(18, 2)
  cotacao        CotacaoPreco @relation(fields: [idCotacao], references: [idCotacao])

  @@map("cotacao_itens")
}

model NotaFiscalCompra {
  idNotaFiscal         Int                 @id @default(autoincrement())
  idCredor             Int
  numeroNota           String
  serie                String?
  chaveAcesso          String?
  dataEmissao          DateTime
  valorTotal           Decimal             @db.Decimal(18, 2)
  idPedido             Int?
  idContratoSuprimento Int?
  status               String
  contratoSuprimento   ContratoSuprimento? @relation(fields: [idContratoSuprimento], references: [idContratoSuprimento])
  credor               Credor              @relation(fields: [idCredor], references: [idCredor])
  pedido               PedidoCompra?       @relation(fields: [idPedido], references: [idPedido])

  @@map("notas_fiscais_compra")
}

model TituloPagar {
  idTituloPagar         Int                       @id  // ID da API Sienge (sem auto-incremento)
  idCredor              Int
  idEmpresaDevedora     Int?
  numeroDocumento       String
  idDocumentoIdent      String?
  dataEmissao           DateTime
  dataVencimento        DateTime
  valorOriginal         Decimal                   @db.Decimal(18, 2)
  valorAtualizado       Decimal?                  @db.Decimal(18, 2)
  idIndexador           Int?
  idPlanoFinanceiro     Int?
  observacao            String?
  descontoObtido        Decimal?                  @db.Decimal(18, 2)
  valorPago             Decimal?                  @db.Decimal(18, 2)
  dataPagamento         DateTime?
  status                String
  idContratoSuprimento  Int?
  parcelas              ParcelaTituloPagar[]
  alocacoesCentroCusto  TituloPagarCentroCusto[]
  alocacoesDepartamento TituloPagarDepartamento[]
  impostos              TituloPagarImposto[]
  contratoSuprimento    ContratoSuprimento?       @relation(fields: [idContratoSuprimento], references: [idContratoSuprimento])
  credor                Credor                    @relation(fields: [idCredor], references: [idCredor])
  documentoIdent        DocumentoIdentificacao?   @relation(fields: [idDocumentoIdent], references: [idDocumentoIdent])
  empresaDevedora       Empresa?                  @relation(fields: [idEmpresaDevedora], references: [idEmpresa])
  indexador             Indexador?                @relation(fields: [idIndexador], references: [idIndexador])
  planoFinanceiro       PlanoFinanceiro?          @relation(fields: [idPlanoFinanceiro], references: [idPlanoFinanceiro])

  @@map("titulos_pagar")
}

model ParcelaTituloPagar {
  idParcela             Int         @id @default(autoincrement())
  idTituloPagar         Int
  numeroParcela         Int
  dataVencimentoParcela DateTime
  valorParcela          Decimal     @db.Decimal(18, 2)
  valorPagoParcela      Decimal?    @db.Decimal(18, 2)
  dataPagamentoParcela  DateTime?
  statusParcela         String
  tituloPai             TituloPagar @relation(fields: [idTituloPagar], references: [idTituloPagar])

  @@map("parcelas_titulo_pagar")
}

model TituloPagarImposto {
  idImposto     Int         @id @default(autoincrement())
  idTituloPagar Int
  tipoImposto   String
  baseCalculo   Decimal     @db.Decimal(18, 2)
  aliquota      Decimal     @db.Decimal(5, 2)
  valorImposto  Decimal     @db.Decimal(18, 2)
  retido        Boolean
  titulo        TituloPagar @relation(fields: [idTituloPagar], references: [idTituloPagar])

  @@map("titulo_pagar_impostos")
}

model TituloPagarCentroCusto {
  idTituloPagar     Int
  idCentroCusto     Int
  idPlanoFinanceiro Int
  percentual        Decimal?        @db.Decimal(5, 2)
  valor             Decimal?        @db.Decimal(18, 2)
  centro            CentroCusto     @relation(fields: [idCentroCusto], references: [idCentroCusto])
  plano             PlanoFinanceiro @relation(fields: [idPlanoFinanceiro], references: [idPlanoFinanceiro])
  titulo            TituloPagar     @relation(fields: [idTituloPagar], references: [idTituloPagar])

  @@id([idTituloPagar, idCentroCusto, idPlanoFinanceiro])
  @@map("titulo_pagar_centro_custo")
}

model TituloPagarDepartamento {
  idTituloPagar  Int
  idDepartamento Int
  percentual     Decimal?     @db.Decimal(5, 2)
  valor          Decimal?     @db.Decimal(18, 2)
  departamento   Departamento @relation(fields: [idDepartamento], references: [idDepartamento])
  titulo         TituloPagar  @relation(fields: [idTituloPagar], references: [idTituloPagar])

  @@id([idTituloPagar, idDepartamento])
  @@map("titulo_pagar_departamento")
}
