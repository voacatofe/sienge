// Script para testar os novos endpoints no banco de produ√ß√£o
const { PrismaClient } = require('@prisma/client');

// Conectar diretamente no banco de produ√ß√£o
const prisma = new PrismaClient({
  datasources: {
    db: {
      url: 'postgresql://sienge_app:kPnrGuFeJeuVprXzhhO2oLVE14f509KV@147.93.15.121:5434/sienge_data?schema=public&sslmode=disable',
    },
  },
});

console.log('üß™ Testando novos endpoints no banco de produ√ß√£o...\n');

async function testNewEndpoints() {
  try {
    console.log('1Ô∏è‚É£ Verificando modelos Prisma...');

    // Teste b√°sico de contagem
    const counts = await Promise.all([
      prisma.centroCusto.count(),
      prisma.planoFinanceiro.count(),
      prisma.extratoContas.count(),
      prisma.extratoApropriacao.count(),
    ]);

    console.log(`   ‚úÖ Centro de Custos: ${counts[0]} registros`);
    console.log(`   ‚úÖ Planos Financeiros: ${counts[1]} registros`);
    console.log(`   ‚úÖ Extratos de Contas: ${counts[2]} registros`);
    console.log(`   ‚úÖ Apropria√ß√µes: ${counts[3]} registros`);

    console.log('\n2Ô∏è‚É£ Testando relacionamentos...');

    // Testar se existem apropria√ß√µes com relacionamentos
    if (counts[3] > 0) {
      const apropriacaoComRelacionamentos =
        await prisma.extratoApropriacao.findFirst({
          include: {
            centroCusto: true,
            planoFinanceiro: true,
            extratoContas: true,
          },
        });

      if (apropriacaoComRelacionamentos) {
        console.log(`   ‚úÖ Relacionamentos funcionando:`);
        console.log(
          `      - Centro de Custo: ${apropriacaoComRelacionamentos.centroCusto?.nome || 'N/A'}`
        );
        console.log(
          `      - Plano Financeiro: ${apropriacaoComRelacionamentos.planoFinanceiro?.nome || 'N/A'}`
        );
        console.log(
          `      - Extrato: ${apropriacaoComRelacionamentos.extratoContas?.descricao || 'N/A'}`
        );
      } else {
        console.log(
          `   ‚ö†Ô∏è Apropria√ß√µes existem mas sem relacionamentos completos`
        );
      }
    } else {
      console.log(
        `   ‚ÑπÔ∏è Nenhuma apropria√ß√£o encontrada (esperado se ainda n√£o sincronizou)`
      );
    }

    console.log('\n3Ô∏è‚É£ Testando campos espec√≠ficos...');

    // Verificar se os centros de custo t√™m os arrays JSON
    if (counts[0] > 0) {
      const centroComArrays = await prisma.centroCusto.findFirst({
        where: {
          OR: [
            { buildingSectors: { not: null } },
            { availableAccounts: { not: null } },
          ],
        },
      });

      if (centroComArrays) {
        console.log(`   ‚úÖ Centro de Custo com arrays encontrado:`);
        console.log(`      - ID: ${centroComArrays.id}`);
        console.log(`      - Nome: ${centroComArrays.nome}`);
        console.log(
          `      - buildingSectors: ${centroComArrays.buildingSectors ? 'presente' : 'ausente'}`
        );
        console.log(
          `      - availableAccounts: ${centroComArrays.availableAccounts ? 'presente' : 'ausente'}`
        );
      } else {
        console.log(`   ‚ÑπÔ∏è Nenhum centro de custo com arrays JSON encontrado`);
      }
    }

    console.log('\n4Ô∏è‚É£ Verificando estrutura de sync...');
    console.log(`   ‚úÖ Endpoints configurados para sincroniza√ß√£o:`);
    console.log(`      - /cost-centers ‚Üí centroCusto`);
    console.log(`      - /payment-categories ‚Üí planoFinanceiro`);
    console.log(
      `      - /accounts-statements ‚Üí extratoContas + extratoApropriacao`
    );

    console.log('\n‚úÖ TESTE CONCLU√çDO COM SUCESSO!');
    console.log('\nüöÄ Os novos endpoints est√£o prontos para sincroniza√ß√£o:');
    console.log('   1. Interface web: bot√£o "Configurar e Sincronizar"');
    console.log('   2. Script autom√°tico: daily-sync.js');
    console.log('   3. API direta: /api/sync/direct');
  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error.message);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

testNewEndpoints();
