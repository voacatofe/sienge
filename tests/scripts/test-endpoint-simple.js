// Script simples para testar os novos endpoints
console.log('üß™ Testando integra√ß√£o dos novos endpoints...\n');

// Teste 1: Verificar se os modelos Prisma existem
console.log('1Ô∏è‚É£ Verificando modelos Prisma...');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

const expectedModels = {
  'accounts-statements': 'extratoContas',
  'cost-centers': 'centroCusto',
  'payment-categories': 'planoFinanceiro',
  appropriations: 'extratoApropriacao',
};

let allModelsExist = true;

for (const [endpoint, modelName] of Object.entries(expectedModels)) {
  try {
    if (prisma[modelName]) {
      console.log(`   ‚úÖ ${endpoint}: modelo ${modelName} encontrado`);
    } else {
      console.log(`   ‚ùå ${endpoint}: modelo ${modelName} N√ÉO encontrado`);
      allModelsExist = false;
    }
  } catch (error) {
    console.log(
      `   üí• ${endpoint}: erro ao verificar modelo - ${error.message}`
    );
    allModelsExist = false;
  }
}

// Teste 2: Verificar contagem atual dos dados
console.log('\n2Ô∏è‚É£ Verificando dados existentes...');

async function checkCounts() {
  try {
    const counts = await Promise.all([
      prisma.centroCusto.count(),
      prisma.planoFinanceiro.count(),
      prisma.extratoContas.count(),
      prisma.extratoApropriacao.count(),
    ]);

    console.log(`   üìä Centro de Custos: ${counts[0]} registros`);
    console.log(`   üìä Planos Financeiros: ${counts[1]} registros`);
    console.log(`   üìä Extratos de Contas: ${counts[2]} registros`);
    console.log(`   üìä Apropria√ß√µes: ${counts[3]} registros`);

    return counts.every(count => count >= 0); // Sucesso se conseguiu contar
  } catch (error) {
    console.log(`   ‚ùå Erro ao contar registros: ${error.message}`);
    return false;
  }
}

// Teste 3: Simular par√¢metros de sync
console.log('\n3Ô∏è‚É£ Testando par√¢metros de sincroniza√ß√£o...');

function testEndpointParams() {
  // Test accounts-statements params
  const oneYearAgo = new Date();
  oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);
  const startDate = oneYearAgo.toISOString().split('T')[0];
  const endDate = new Date().toISOString().split('T')[0];

  console.log(
    `   ‚úÖ accounts-statements: startDate=${startDate}, endDate=${endDate}`
  );
  console.log(`   ‚úÖ cost-centers: sem par√¢metros obrigat√≥rios`);
  console.log(`   ‚úÖ payment-categories: sem par√¢metros obrigat√≥rios`);

  return true;
}

// Executar testes
async function runTests() {
  const countsOk = await checkCounts();
  const paramsOk = testEndpointParams();

  console.log('\nüìä RESULTADO FINAL:');
  if (allModelsExist && countsOk && paramsOk) {
    console.log(
      '‚úÖ Todos os testes passaram! Os novos endpoints est√£o prontos para sincroniza√ß√£o.'
    );
    console.log('\nüöÄ Pr√≥ximos passos:');
    console.log(
      '   1. Testar sync manual via interface (bot√£o "Configurar e Sincronizar")'
    );
    console.log('   2. Verificar logs de sincroniza√ß√£o');
    console.log('   3. Confirmar novos dados no banco ap√≥s sync');
    console.log('   4. Testar sync autom√°tico (daily-sync)');
  } else {
    console.log('‚ùå Alguns testes falharam. Verifique os problemas acima.');
    process.exit(1);
  }

  await prisma.$disconnect();
}

runTests().catch(console.error);
